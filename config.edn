{
 ; HTML要素別イベント
 :event-map {:label  "click"
             ;:text   "change"  ; フォーカス遷移時に入力
             :text   "input"    ; キー押下時に入力
             :select "change"
             :check  "click"
             :radio  "change"
             :button "click"
             :table  "click"}

 ; HTML要素別動作
 :verb-map {:label  ""
            :text   "change"
            :select "change"
            :check  "change"
            :radio  "change"
            :button "click"
            :table  "select"}

 ; 要素タイプの和名
 :type-name-JP {:label  "ラベル"
                :text   "テキスト"
                :select "ドロップダウンリスト"
                :check  "チェックボックス"
                :radio  "ラジオボタン"
                :button "ボタン"
                :table  "テーブル"}

 ; 動詞の和名
 :verb-name-JP {"change" "変更"
                "select" "選択"}

 ; アクション引数
 :action-arg {:text    "e"
              :default "{currentTarget}"
              }

 ; アクション取得値
 :action-value {:text     "isSmartPhone() ?
        {
            valid: e.inputType !== 'insertCompositionText' ? true : false,
            value: e.inputType !== 'insertCompositionText' ? e.currentTarget.value : null,
        } :
        {
            valid: true,
            value: e.currentTarget.value,
        }"
                :select   "currentTarget.options[currentTarget.selectedIndex]"
                :check    "currentTarget.checked"
                :radio    "util.getCheckedRadioValue(currentTarget.name)"
                :default  "currentTarget"
                }

 ; リデューサ実装
 :reducer-code {:text     "if (action.payload.valid) {
        state.{{state-id}} = action.payload.value;
    }"
                :select   "state.{{state-id}} = action.payload;"
                :check    "state.{{state-id}} = action.payload;"
                :radio    "state.{{state-id}} = action.payload;"
                :default  "// TODO"
                }

 ; ビュー実装
 :view-code {:text    "    let input = core.getElement({{id-descriptor}});
    input.value = state.{{state-id}};
    return input;"
             :select  "    let input = core.getElement({{id-descriptor}});
    if (state.{{state-id}} != null) {
        input.value = state.{{state-id}}.value;
    }
    return input;"
             :check   "    let input = core.getElement({{id-descriptor}});
    input.checked = state.{{state-id}};
    return input;"
             :radio   "    util.setCheckedRadioValue(\"{{group}}\", state.{{state-id}});
    return null;"
             :button  "    let input = core.getElement({{id-descriptor}});
    return input;"
             :table   "    let table = core.getElement({{id-descriptor}});
    core.removeChildren(table);
//    state.{{state-id}}.forEach(x => {
//        let tr = core.addNewTag(
//            table,
//            'tr',
//            [],
//            [
//              { name: 'id', val: '【行を特定可能な識別子】' },
//              { name: 'style', val: 'border: 1px solid #A1A1A1' },
//              { name: 'onmouseover', val: 'tableMouseOver(this)' },
//              { name: 'onmouseout', val: 'tableMouseOut(this)' }
//            ]);
//        tr.addEventListener('click', {{lower-id}}RowSelector, false);
//        let td = core.addNewTag(tr, 'td', [], []);
//        td.textContent = x.【カラム1】;
//        td = core.addNewTag(tr, 'td', [], []);
//        td.textContent = x.【カラム2】;
//        td = core.addNewTag(tr, 'td', [], []);
//        td.textContent = x.【カラム3】;
//    });
    return table;"
             :default "    // TODO
    return null;"
}

; バインド実装
:bind-code {:table   "let {{lower-name}}RowSelector = null;
export function bind{{name}}RowSelector(actionCreator) {
    {{lower-name}}RowSelector = actionCreator;
}"
            :default "export function bind{{name}}(actionCreator) {
    return util.bind(ID_{{id-descriptor}}, \"{{event}}\", actionCreator);
}"
            }
}
